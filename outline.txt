DO NOT TREAT THIS AS DOCUMENTATION. this is basically a scratchpad for notes and will most likely diverge from the code after a while

parse options
	if argv[1] == '-h':
		print help text
		exit
	else:

argv[1]
cache size -> atoi

argv[2]	
associativity ( direct / assoc / assoc:n) -> check and set some flags or something, parse assoc:n

argv[3]
block size -> atoi
	
argv[4]
write policy -> check wt or wb, set flag

argv[5]
trace file -> open,read


create cache from options
	???
	we have the cache itself
	sets in cache 
	cache lines in set
	and then cache lines have valid bits, tag, actual data


open file
parse line by line?
sscanf


initializing cache:
	number of cache lines = cache size/block size

	number of sets = # of lines if direct mapped
	number of sets = 1 if fully associative
	number of sets = lines/assoc if assoc>0

I was thinking about the set/tag wrong
the number of sets is correct, but the tag is just whatever is leftover in the memory address after you remove the block offset bits and the set bits

set mask bits = log2(#sets)
tag mask bits = log2(memory address) - (log2(#sets) + log2(block size))
don't need the tag mask bits.

set mask = block offset:

to parse the tag and set indices:
set index = mem_loc/block_offset % (number of sets)

tag = mem_loc/tag_mask

read cache:
	parse set index
	parse tag
	get cache_set from cache
	look for tag in cache_set
	if there, cache hit
	if not, cache miss
		memory read
		if there is a cache line with valid bit == 0
			set that valid bit = 1
		else:
			find lru line
			if writeback and line is dirty
				memory write
				set dirty bit to clean
		update tag

	update lru counter w/ pc

write cache:
	parse set index
	parse tag
	get cache_set from cache
	look for tag in cache_set
	if there, cache hit
		cache write
		if writethrough
			memory write
		if writeback
			change tag
			set dirty bit
	if not, cache miss
		memory read
		if there is a cache line with valid bit == 0
			set that valid bit = 1
			set tag
			set lru
			set dirty bit XXX if writeback we wouldn't write immediately
		if not:
			find lru line
			if writeback and line is dirty
				memory write
				set dirty bit = 1
			else
				memory write
			update tag
			
